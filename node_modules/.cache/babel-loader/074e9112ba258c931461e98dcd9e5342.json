{"ast":null,"code":"var _jsxFileName = \"/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm(_ref) {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    if (!clientSecret) {\n      return;\n    }\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    stripe.retrievePaymentIntent(clientSecret).then(_ref2 => {\n      let {\n        paymentIntent\n      } = _ref2;\n      alert('hello');\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment = {\n            customer_id: id,\n            payment_id: paymentIntent.id,\n            amount: paymentIntent.amount,\n            date: paymentIntent.created,\n            currency: paymentIntent.currency\n          };\n          axios.post('http://localhost:4242/payment', payment).then(data => {\n            console.log(data);\n          });\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"I2mD8VtLUdS+pxXYAFWCJ5LM4cQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","axios","wait","CheckoutForm","id","stripe","elements","clientSecret","URLSearchParams","window","location","search","get","message","setMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault","retrievePaymentIntent","then","paymentIntent","alert","status","payment","customer_id","payment_id","amount","date","created","currency","post","data","console","log","error","confirmPayment","confirmParams","return_url","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\n\nexport default function CheckoutForm({id}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const clientSecret = new URLSearchParams(window.location.search).get(\n    \"payment_intent_client_secret\"\n  );  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n\n\n    if (!clientSecret) {\n      return;\n    }\n\n\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n        alert('hello')\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment={\n              customer_id:id,\n              payment_id:paymentIntent.id,\n              amount:paymentIntent.amount,\n              date:paymentIntent.created,\n              currency:paymentIntent.currency\n          }\n           axios.post('http://localhost:4242/payment',payment)\n          .then((data)=>{\n              console.log(data)\n          })\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    \n    const { error } = await stripe.confirmPayment({\n        \n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}