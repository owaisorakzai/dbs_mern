{"ast":null,"code":"var _jsxFileName = \"/home/owais/bds_app/src/components.js/forms/form-reusable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormContext } from \"react-hook-form\";\nimport './forms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form(props) {\n  _s();\n\n  const {\n    register,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n\n  const renderForm = () => {\n    switch (props.input.type) {\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group\",\n          children: [props.input.require == true ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"red\",\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 54\n          }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: props.input.type,\n            ...register(props.input.name, {\n              required: props.input.require,\n              onChange: props.input.change,\n              pattern: props.input.pattern,\n              maxLength: props.input.maxCharacters\n            }),\n            autocomplete: \"off\",\n            class: \"form-control form-control-sm\",\n            placeholder: props.input.placholder,\n            value: props.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: props.input.name,\n            class: \"form-text\",\n            children: props.input.smallText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"pattern\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Invalid character \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 99\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"required\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Cannot be a blank field \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 100\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"maxLength\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Maximum characters exceeded \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 101\n          }, this)]\n        }, props.input.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 25\n        }, this);\n\n      case 'date':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group\",\n          children: [props.input.require == true ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"red\",\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 54\n          }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: props.input.type,\n            value: props.input.value,\n            value: props.data,\n            onChange: props.input.change,\n            name: props.input.name,\n            ...register(props.input.name, {\n              required: props.input.require,\n              onChange: props.input.change\n            }),\n            max: props.input.max,\n            class: \"form-control form-control-sm\",\n            id: \"forename\",\n            placeholder: props.input.placeholder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"required\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Cannot be a blank field \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 100\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this);\n\n      case 'date':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group\",\n          children: [props.input.require == true ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"red\",\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 54\n          }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: props.input.type,\n            value: props.input.value,\n            value: props.data,\n            onChange: props.input.change,\n            name: props.input.name,\n            ...register(props.input.name, {\n              required: props.input.require,\n              onChange: props.input.change\n            }),\n            max: props.input.max,\n            class: \"form-control form-control-sm\",\n            id: \"forename\",\n            placeholder: props.input.placeholder,\n            required: props.input.require\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"required\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Cannot be a blank field \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 100\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this);\n\n      case 'select':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: props.input.title,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: props.input.name,\n            ...register(props.input.name, {\n              required: props.input.require,\n              onChange: props.input.change,\n              validate: props.input.address\n            }),\n            className: \"form-select form-select-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), props.input.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"required\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Cannot be a blank field \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 100\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: props.input.name,\n            class: \"form-text\",\n            children: props.input.smallText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this);\n\n      case 'email':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: props.input.name,\n            children: props.input.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: props.input.type,\n            value: props.data,\n            autocomplete: \"off\",\n            name: props.input.name,\n            ...register(props.input.name, {\n              required: props.input.require,\n              onChange: props.input.change\n            }),\n            class: \"form-control form-control-sm\",\n            placeholder: props.input.placeholder,\n            \"aria-describedby\": props.input.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: props.input.name,\n            class: \"form-text\",\n            children: props.input.smallText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 33\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"pattern\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Please enter valid value \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 107\n          }, this), errors[props.input.name] && errors[props.input.name].type == \"required\" && /*#__PURE__*/_jsxDEV(\"smallText\", {\n            className: \"text-danger\",\n            children: \" Cannot be a blank field \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 100\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this);\n\n      default:\n        break;\n    }\n  };\n\n  return renderForm();\n}\n\n_s(Form, \"nApRpUpP7dmsqvap3Xmj1tAAJYA=\", false, function () {\n  return [useFormContext];\n});\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/owais/bds_app/src/components.js/forms/form-reusable.js"],"names":["React","useFormContext","Form","props","register","formState","errors","renderForm","input","type","require","name","title","required","onChange","change","pattern","maxLength","maxCharacters","placholder","data","smallText","value","max","placeholder","validate","address","options","map","option"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormContext } from \"react-hook-form\";\nimport './forms.css'\n\n\nexport default function Form(props) {\n    const { register,formState: { errors } } = useFormContext();\n\n    const renderForm =()=>{\n        switch (props.input.type) {\n            case 'text':\n                    return(\n                        <div class=\"form-group\" key={props.input.name}>\n                        {props.input.require==true ?(<label className='red' for={props.input.name}>{props.input.title}</label>):\n                        <label for={props.input.name}>{props.input.title}</label>\n                    }\n                        \n                        <input type={props.input.type} {...register(props.input.name, { required: props.input.require ,onChange: props.input.change, pattern: props.input.pattern,maxLength:props.input.maxCharacters })} autocomplete=\"off\"  class=\"form-control form-control-sm\" placeholder={props.input.placholder} value={props.data} />\n                        <div id={props.input.name} class=\"form-text\">{props.input.smallText}</div>\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"pattern\" && <smallText className='text-danger'> Invalid character </smallText>}\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"required\" && <smallText className='text-danger'> Cannot be a blank field </smallText>}\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"maxLength\" && <smallText className='text-danger'> Maximum characters exceeded </smallText>}\n\n\n                      </div>\n                    )\n            case 'date':\n                    return(\n                        <div class=\"form-group\">\n                        {props.input.require==true ?(<label className='red' for={props.input.name}>{props.input.title}</label>):\n                        <label for={props.input.name}>{props.input.title}</label>\n                    }\n                        <input type={props.input.type} value={props.input.value} value={props.data} onChange={props.input.change} name={props.input.name} {...register(props.input.name, { required: props.input.require ,onChange: props.input.change})} max={props.input.max} class=\"form-control form-control-sm\" id=\"forename\" placeholder={props.input.placeholder} />\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"required\" && <smallText className='text-danger'> Cannot be a blank field </smallText>}\n\n                      </div>\n                    )\n            case 'date':\n                        return(\n                            <div class=\"form-group\">\n                        {props.input.require==true ?(<label className='red' for={props.input.name}>{props.input.title}</label>):\n                        <label for={props.input.name}>{props.input.title}</label>\n                    }\n                            <input type={props.input.type} value={props.input.value} value={props.data} onChange={props.input.change} name={props.input.name} {...register(props.input.name, { required: props.input.require ,onChange: props.input.change})} max={props.input.max} class=\"form-control form-control-sm\" id=\"forename\" placeholder={props.input.placeholder} required={props.input.require}/>\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"required\" && <smallText className='text-danger'> Cannot be a blank field </smallText>}\n    \n                          </div>\n                        )\n            case 'select':\n                    return(\n                        <div>\n                        <label for={props.input.title}>{props.input.title}</label>\n                        <select name={props.input.name} {...register(props.input.name, { required: props.input.require,onChange: props.input.change,validate:props.input.address })} className='form-select form-select-sm'>\n                            <option value=\"\">Select</option>\n                            {\n                            props.input.options.map((option)=>(\n                                <option value={option}>{option}</option>\n                            ))}\n                        </select>\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"required\" && <smallText className='text-danger'> Cannot be a blank field </smallText>}\n                        <div id={props.input.name} class=\"form-text\">{props.input.smallText}</div>\n\n                        </div>\n                        )\n            case 'email':\n                    return(\n                        <div class=\"form-group\">\n                            \n                            <label for={props.input.name}>{props.input.title}</label>\n                                <input type={props.input.type} value={props.data} autocomplete=\"off\"  name={props.input.name} {...register(props.input.name, { required: props.input.require,onChange: props.input.change })} class=\"form-control form-control-sm\" placeholder={props.input.placeholder} aria-describedby={props.input.name} />\n                                <div id={props.input.name} class=\"form-text\">{props.input.smallText}</div>\n                                {errors[props.input.name] &&  errors[props.input.name].type==\"pattern\" && <smallText className='text-danger'> Please enter valid value </smallText>}\n                        {errors[props.input.name] &&  errors[props.input.name].type==\"required\" && <smallText className='text-danger'> Cannot be a blank field </smallText>}\n                        </div>\n                        \n                            )\n                    \n        \n            default:\n                break;\n        }\n\n    }\n  return (\n      renderForm()\n\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}