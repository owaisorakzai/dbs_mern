{"ast":null,"code":"var _jsxFileName = \"/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm(_ref) {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  let clientSecret;\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref2 => {\n      let {\n        paymentIntent\n      } = _ref2;\n      alert('hello');\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment = {\n            customer_id: id,\n            payment_id: paymentIntent.id,\n            amount: paymentIntent.amount,\n            date: paymentIntent.created,\n            currency: paymentIntent.currency\n          };\n          axios.post('http://localhost:4242/notes', payment).then(data => {\n            console.log(data);\n          });\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: elements.getElement(CardElement)\n    }\n  }).then(data => {\n    console.log(data);\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"I2mD8VtLUdS+pxXYAFWCJ5LM4cQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CardElement","axios","wait","CheckoutForm","id","stripe","elements","clientSecret","message","setMessage","isLoading","setIsLoading","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","alert","status","payment","customer_id","payment_id","amount","date","created","currency","post","data","console","log","confirmCardPayment","payment_method","card","getElement","handleSubmit","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements,\n  CardElement\n} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\n\nexport default function CheckoutForm({id}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  let clientSecret\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n        alert('hello')\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment={\n              customer_id:id,\n              payment_id:paymentIntent.id,\n              amount:paymentIntent.amount,\n              date:paymentIntent.created,\n              currency:paymentIntent.currency\n          }\n        axios.post('http://localhost:4242/notes',payment)\n          .then((data)=>{\n              console.log(data)\n          })\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n    stripe.confirmCardPayment(clientSecret,{\n        payment_method:{\n            card:elements.getElement(CardElement)\n        }\n  \n    }).then((data)=>{\n        console.log(data)\n    })\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}