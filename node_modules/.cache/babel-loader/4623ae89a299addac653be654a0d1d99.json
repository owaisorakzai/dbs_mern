{"ast":null,"code":"var _jsxFileName = \"/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm(_ref) {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref2 => {\n      let {\n        paymentIntent\n      } = _ref2;\n      console.log(clientSecret);\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment = {\n            customer_id: id,\n            payment_id: paymentIntent.id,\n            amount: paymentIntent.amount,\n            date: paymentIntent.created,\n            currency: paymentIntent.currency\n          };\n          axios.post('http://localhost:4242/notes', payment).then(data => {\n            console.log(data);\n          });\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"I2mD8VtLUdS+pxXYAFWCJ5LM4cQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/owais/bds_app/src/components.js/dashboard/components/checkoutform.js"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","axios","CheckoutForm","id","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","console","log","status","payment","customer_id","payment_id","amount","date","created","currency","post","data","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\n\nexport default function CheckoutForm({id}) {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n        console.log(clientSecret)\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          let payment={\n              customer_id:id,\n              payment_id:paymentIntent.id,\n              amount:paymentIntent.amount,\n              date:paymentIntent.created,\n              currency:paymentIntent.currency\n          }\n          axios.post('http://localhost:4242/notes',payment)\n          .then((data)=>{\n              console.log(data)\n          })\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    \n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        \n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}